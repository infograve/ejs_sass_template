// ########## Functions ##########
$math_pi: 3.14159;

// ========== exponentiation - 冪乗を取得する ==========
//[argument]
//  $argBase      : 底
//  $argExponent  : 冪指数
//[return value]
//  argBase と argExponent の 冪
@function exponentiation($argBase, $argExponent){
  $tmpPower : $argBase;
  @if $argExponent > 1 {
    @for $count from 2 through $argExponent {
      $tmpPower : $tmpPower * $argBase;
    }
  }
  @if $argExponent < 1 {
    @for $count from 0 through -$argExponent {
      $tmpPower : $tmpPower / $argBase;
    }
  }
  @return $tmpPower;
}

// ========== factorial - 階乗を取得する ==========
//[argument]
//  $argNumber : 数
//[return value]
//  1 から argNumber までのすべての整数の積
@function factorial($argNumber){
  $tmpSolution : 1;
  @if $argNumber > 0 {
    @for $count from 2 through $argNumber {
      $tmpSolution : $tmpSolution * $count;
    }
  }
  @return $tmpSolution;
}

// ========== sine - 正弦 ==========
//[argument]
//  $argAngle : 度数
//[return value]
//  sin $argAngle°
@function sine($argAngle){
  $tmpAngle: $argAngle / 180 * $math_pi;
  $tmpSolution: $tmpAngle;
  @for $count from 1 through 10 {
    $tmpSolution: $tmpSolution + (exponentiation(-1, $count) / factorial(2 * $count + 1) ) * exponentiation($tmpAngle, (2 * $count + 1));
  }
  @return $tmpSolution;
}

// ========== cosine - 余弦 ==========
//[argument]
//  $argAngle : 度数
//[return value]
//  sin $argAngle°
@function cosine($argAngle){
  $tmpAngle: $argAngle / 180 * $math_pi;
  $tmpSolution: 1;
  @for $count from 1 through 10 {
    $tmpSolution: $tmpSolution + (exponentiation(-1, $count) / factorial(2 * $count) ) * exponentiation($tmpAngle, (2 * $count));
  }
  @return $tmpSolution;
}

// ========== tangent - 正接 ==========
//[argument]
//  $argAngle : 度数
//[return value]
//  sin $argAngle°
@function tangent($argAngle){
  @return sine($argAngle) / cosine($argAngle);
}

// ========== ratio - 比例関係から値を取得する ==========
//[argument]
//  $argBase1 : ベースになる比例(1)
//  $argBase2 : ベースになる比例(2)
//  $argWant1 : 求めたい数値(1)、返り値に欲しい場合 null
//  $argWant2 : 求めたい数値(2)、返り値に欲しい場合 null
//[return value]
//  argBase1 : $argBase2 の時の $argWant1 : $argWant2 から null に指定された値
@function ratio($argBase1,$argBase2,$argWant1,$argWant2){
  @if $argWant1 == null { @return ($argWant2/$argBase2)*$argBase1; }
  @else if $argWant2 == null { @return ($argWant1/$argBase1)*$argBase2; }
  @else { @return false; }
}


// ********** PSDの横幅、最大拡大幅、最小縮小幅 (PC) **********
$pc-basewidth: 1024;
$pc-minwidth:  auto;
$pc-maxwidth:  none;

// ========== pc-baseviewportwidth - PC版デザインでのviewportwidth値を計算する ==========
//[argument]
//  $argPixels : デザインデータ上の横幅(pixels)
//[return value]
//  ベースサイズを100vwとしたviewportwidth値
@function pc-baseviewportwidth($argPixels){
  @if $argPixels == auto { @return auto; }
  @else if $argPixels == $pc-basewidth { @return 100%; }
  @else { @return ($argPixels/$pc-basewidth)*100vw; }
}

// ========== pc-baseviewportwidth2 - PC版デザインでのviewportwidth値を計算する(100%なし) ==========
//[argument]
//  $argPixels : デザインデータ上の横幅(pixels)
//[return value]
//  ベースサイズを100vwとしたviewportwidth値
@function pc-baseviewportwidth2($argPixels){
  @if $argPixels == auto { @return auto; }
  @else { @return ($argPixels/$pc-basewidth)*100vw; }
}

// ========== pc-minpixels - PC版デザインでの最小のpixel値を計算する ==========
//[argument]
//  $argPixels : デザインデータ上の横幅(pixels)
//[return value]
//  ベースサイズを$pc-minwidthとしたpixels値
@function pc-minpixels($argPixels){
  @if $argPixels == auto { @return auto; }
  @else if $pc-minwidth == auto { @return auto; }
  @else { @return ($argPixels/$pc-basewidth)*$pc-minwidth+0px; }
}

// ========== pc-maxpixels - PC版デザインでの最大のpixel値を計算する ==========
//[argument]
//  $argPixels : デザインデータ上の横幅(pixels)
//[return value]
//  ベースサイズを$pc-maxwidthとしたpixels値
@function pc-maxpixels($argPixels){
  @if $argPixels == auto { @return none; }
  @else if $pc-maxwidth == none { @return none; }
  @else { @return ($argPixels/$pc-basewidth)*$pc-maxwidth+0px; }
}


// ********** PSDの横幅、最大拡大幅、最小縮小幅 (SP) **********
$sp-basewidth:   750;
$sp-minwidth:   auto;
$sp-maxwidth:   none;

// ========== sp-baseviewportwidth - SP版デザインでのviewportwidth値を計算する ==========
//[argument]
//  $argPixels : デザインデータ上の横幅(pixels)
//[return value]
//  ベースサイズを100vwとしたviewportwidth値
@function sp-baseviewportwidth($argPixels){
  @if $argPixels == auto { @return auto; }
  @else if $argPixels == $sp-basewidth { @return 100%; }
  @else { @return ($argPixels/$sp-basewidth)*100vw; }
}

// ========== sp-baseviewportwidth2 - SP版デザインでのviewportwidth値を計算する(100%なし) ==========
//[argument]
//  $argPixels : デザインデータ上の横幅(pixels)
//[return value]
//  ベースサイズを100vwとしたviewportwidth値
@function sp-baseviewportwidth2($argPixels){
  @if $argPixels == auto { @return auto; }
  @else { @return ($argPixels/$sp-basewidth)*100vw; }
}

// ========== sp-minpixels - SP版デザインでの最小のpixel値を計算する ==========
//[argument]
//  $argPixels : デザインデータ上の横幅(pixels)
//[return value]
//  ベースサイズを$sp-minwidthとしたpixels値
@function sp-minpixels($argPixels){
  @if $argPixels == auto { @return auto; }
  @else if $sp-minwidth == auto { @return auto; }
  @else { @return ($argPixels/$sp-basewidth)*$sp-minwidth+0px; }
}

// ========== sp-maxpixels - SP版デザインでの最大のpixel値を計算する ==========
//[argument]
//  $argPixels : デザインデータ上の横幅(pixels)
//[return value]
//  ベースサイズを$sp-maxwidthとしたpixels値
@function sp-maxpixels($argPixels){
  @if $argPixels == auto { @return none; }
  @else if $sp-maxwidth == none { @return none; }
  @else { @return ($argPixels/$sp-basewidth)*$sp-maxwidth+0px; }
}



// ########## Mixin ##########
// ========== pc-elementsize - エレメントのサイズ出力(PC) ==========
//[argument]
//  $width : デザインデータ上の横幅(pixels)
//  $height : デザインデータ上の縦幅(pixels)
//[return value]
//  width:pc-baseviewportwidth($width); height:pc-baseviewportwidth($height);
//  min-width:pc-minpixels($width); max-width:pc-maxpixels($width);
//  min-height:pc-minpixels($height); max-height:pc-maxpixels($height);
@mixin pc-elementsize($width,$height){
  width:pc-baseviewportwidth($width); height:pc-baseviewportwidth2($height);
  min-width:pc-minpixels($width); max-width:pc-maxpixels($width);
  min-height:pc-minpixels($height); max-height:pc-maxpixels($height);
}

// ========== pc-fontsize - フォントサイズ出力(PC) ==========
//[argument]
//  $base : デザインデータ上のフォントサイズ(pixels)
//[return value]
//  font-size:pc-baseviewportwidth($base);
//  @media (max-width:$pc-minwidth+0px) font-size:pc-minpixels($base);
//  @media (min-width:$pc-maxwidth+0px) font-size:pc-maxpixels($base);
@mixin pc-fontsize($base){
  font-size:pc-baseviewportwidth($base);
  @if $pc-minwidth != auto { @media (max-width:$pc-minwidth+0px) { font-size:pc-minpixels($base); }}
  @if $pc-maxwidth != none { @media (min-width:$pc-maxwidth+0px) { font-size:pc-maxpixels($base); }}
}

// ========== sp-elementsize - エレメントのサイズ出力(SP) ==========
//[argument]
//  $width : デザインデータ上の横幅(pixels)
//  $height : デザインデータ上の縦幅(pixels)
//[return value]
//  width:sp-baseviewportwidth($width); height:sp-baseviewportwidth2($height);
//  min-width:sp-minpixels($width); max-width:sp-maxpixels($width);
//  min-height:sp-minpixels($height); max-height:sp-maxpixels($height);
@mixin sp-elementsize($width,$height){
  width:sp-baseviewportwidth($width); height:sp-baseviewportwidth2($height);
  min-width:sp-minpixels($width); max-width:sp-maxpixels($width);
  min-height:sp-minpixels($height); max-height:sp-maxpixels($height);
}

// ========== sp-fontsize - フォントサイズ出力(SP) ==========
//[argument]
//  $base : デザインデータ上のフォントサイズ(pixels)
//[return value]
//  font-size:sp-baseviewportwidth($base);
//  @media (max-width:$sp-minwidth+0px) font-size:sp-minpixels($base);
//  @media (min-width:$sp-maxwidth+0px) font-size:sp-maxpixels($base);
@mixin sp-fontsize($base){
  font-size:sp-baseviewportwidth($base);
  @if $sp-minwidth != auto { @media (max-width:$sp-minwidth+0px) { font-size:sp-minpixels($base); }}
  @if $sp-maxwidth != none { @media (min-width:$sp-maxwidth+0px) { font-size:sp-maxpixels($base); }}
}
